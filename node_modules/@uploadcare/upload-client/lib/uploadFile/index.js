"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var uploadBase_1 = require("./uploadBase");
var uploadFromUrl_1 = require("./uploadFromUrl");
var uploadFromUploaded_1 = require("./uploadFromUploaded");
var defaultSettings_1 = require("../defaultSettings");
var types_1 = require("./types");
var isMultipart_1 = require("../tools/isMultipart");
var uploadMultipart_1 = require("./uploadMultipart");
/**
 * Uploads file from provided data.
 * @param data
 * @param options
 * @param [options.publicKey]
 * @param [options.fileName]
 * @param [options.baseURL]
 * @param [options.secureSignature]
 * @param [options.secureExpire]
 * @param [options.store]
 * @param [options.cancel]
 * @param [options.onProgress]
 * @param [options.source]
 * @param [options.integration]
 * @param [options.retryThrottledRequestMaxTimes]
 * @param [options.contentType]
 * @param [options.multipartChunkSize]
 * @param [options.multipartMaxAttempts]
 * @param [options.maxConcurrentRequests]
 * @param [options.checkForUrlDuplicates]
 * @param [options.saveUrlForRecurrentUploads]
 * @param [options.pusherKey]
 */
function uploadFile(data, _a) {
    var publicKey = _a.publicKey, fileName = _a.fileName, _b = _a.baseURL, baseURL = _b === void 0 ? defaultSettings_1.default.baseURL : _b, secureSignature = _a.secureSignature, secureExpire = _a.secureExpire, store = _a.store, cancel = _a.cancel, onProgress = _a.onProgress, source = _a.source, integration = _a.integration, retryThrottledRequestMaxTimes = _a.retryThrottledRequestMaxTimes, contentType = _a.contentType, multipartChunkSize = _a.multipartChunkSize, multipartMaxAttempts = _a.multipartMaxAttempts, maxConcurrentRequests = _a.maxConcurrentRequests, _c = _a.baseCDN, baseCDN = _c === void 0 ? defaultSettings_1.default.baseCDN : _c, checkForUrlDuplicates = _a.checkForUrlDuplicates, saveUrlForRecurrentUploads = _a.saveUrlForRecurrentUploads, pusherKey = _a.pusherKey;
    if (types_1.isFileData(data)) {
        var fileSize = isMultipart_1.getFileSize(data);
        if (isMultipart_1.isMultipart(fileSize)) {
            return uploadMultipart_1.default(data, {
                publicKey: publicKey,
                contentType: contentType,
                multipartChunkSize: multipartChunkSize,
                multipartMaxAttempts: multipartMaxAttempts,
                fileName: fileName,
                baseURL: baseURL,
                secureSignature: secureSignature,
                secureExpire: secureExpire,
                store: store,
                cancel: cancel,
                onProgress: onProgress,
                source: source,
                integration: integration,
                maxConcurrentRequests: maxConcurrentRequests,
                retryThrottledRequestMaxTimes: retryThrottledRequestMaxTimes,
                baseCDN: baseCDN
            });
        }
        return uploadBase_1.default(data, {
            publicKey: publicKey,
            fileName: fileName,
            baseURL: baseURL,
            secureSignature: secureSignature,
            secureExpire: secureExpire,
            store: store,
            cancel: cancel,
            onProgress: onProgress,
            source: source,
            integration: integration,
            retryThrottledRequestMaxTimes: retryThrottledRequestMaxTimes,
            baseCDN: baseCDN
        });
    }
    if (types_1.isUrl(data)) {
        return uploadFromUrl_1.default(data, {
            publicKey: publicKey,
            fileName: fileName,
            baseURL: baseURL,
            baseCDN: baseCDN,
            checkForUrlDuplicates: checkForUrlDuplicates,
            saveUrlForRecurrentUploads: saveUrlForRecurrentUploads,
            secureSignature: secureSignature,
            secureExpire: secureExpire,
            store: store,
            cancel: cancel,
            onProgress: onProgress,
            source: source,
            integration: integration,
            retryThrottledRequestMaxTimes: retryThrottledRequestMaxTimes,
            pusherKey: pusherKey
        });
    }
    if (types_1.isUuid(data)) {
        return uploadFromUploaded_1.default(data, {
            publicKey: publicKey,
            fileName: fileName,
            baseURL: baseURL,
            cancel: cancel,
            onProgress: onProgress,
            source: source,
            integration: integration,
            retryThrottledRequestMaxTimes: retryThrottledRequestMaxTimes,
            baseCDN: baseCDN
        });
    }
    throw new TypeError("File uploading from \"" + data + "\" is not supported");
}
exports.default = uploadFile;
